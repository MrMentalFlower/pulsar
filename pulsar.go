/*
 ____        __  __      __          ____        ______      ____
/\  _`\     /\ \/\ \    /\ \        /\  _`\     /\  _  \    /\  _`\
\ \ \L\ \   \ \ \ \ \   \ \ \       \ \,\L\_\   \ \ \_\ \   \ \ \_\ \
 \ \ ,__/    \ \ \ \ \   \ \ \  __   \/_\__ \    \ \  __ \   \ \ ,  /
  \ \ \/      \ \ \_\ \   \ \ \L\ \    /\ \L\ \   \ \ \/\ \   \ \ \\ \
   \ \_\       \ \_____\   \ \____/    \ `\____\   \ \_\ \_\   \ \_\ \_\
    \/_/        \/_____/    \/___/      \/_____/    \/_/\/_/    \/_/\/ /

Date: 2023 1-5
Creator: flower
Description: A simple CLI clock that just displays time

*/

/*
letters
font: lary 3d from texttool.com
https://www.texttool.com/ascii-font#p=display&f=Larry%203D&t=%5C
 ______       ____         ____         ____         _____        ____       ____        __  __       ______       _____      __  __      __                       _   _      __  __      _____       ____        _____       ____        ____        ______      __  __      __  __      __   __      __    __      ________
/\  _  \     /\  _`\      /\  _`\      /\  _`\      /\  ___\     /\  _`\    /\  _`\     /\ \/\ \     /\__  _\     /\___ \    /\ \/\ \    /\ \         /'\_/`\     / \_/ \    /\ \/\ \    /\  __`\    /\  _`\     /\  __`\    /\  _`\     /\  _`\     /\__  _\    /\ \/\ \    /\ \/\ \    /\ \ /\ \    /\ \  /\ \    /\_____  \
\ \ \L\ \    \ \ \L\ \    \ \ \/\_\    \ \ \/\ \    \ \ \___     \ \ \L\_\  \ \ \L\_\   \ \ \_\ \    \/_/\ \/     \/__/\ \   \ \ \/'/'   \ \ \       /\      \   /\ \__\ \   \ \ `\\ \   \ \ \/\ \   \ \ \L\ \   \ \ \/\ \   \ \ \L\ \   \ \,\L\_\   \/_/\ \/    \ \ \ \ \   \ \ \ \ \   \ `\`\/'/'   \ `\`\\/'/    \/____//'/'
 \ \  __ \    \ \  _ <'    \ \ \/_/_    \ \ \ \ \    \ \  ___\    \ \  _\/   \ \ \L_L    \ \  _  \      \ \ \        _\ \ \   \ \ , <     \ \ \  __  \ \ \__\ \  \ \ \_/\ \   \ \ , ` \   \ \ \ \ \   \ \ ,__/    \ \ \ \ \   \ \ ,  /    \/_\__ \      \ \ \     \ \ \ \ \   \ \ \ \ \   `\/ > <      `\ `\ /'          //'/'
  \ \ \/\ \    \ \ \L\ \    \ \ \L\ \    \ \ \_\ \    \ \ \____    \ \ \/     \ \ \/, \   \ \ \ \ \      \_\ \__    /\ \_\ \   \ \ \\`\    \ \ \L\ \  \ \ \_/\ \  \ \ \\ \ \   \ \ \`\ \   \ \ \_\ \   \ \ \/      \ \ \_\ \   \ \ \\ \     /\ \L\ \     \ \ \     \ \ \_\ \   \ \ \_/ \     \/'/\`\     `\ \ \         //'/'___
   \ \_\ \_\    \ \____/     \ \____/     \ \____/     \ \_____\    \ \_\      \ \____/    \ \_\ \_\     /\_____\   \ \____/    \ \_\ \_\   \ \____/   \ \_\\ \_\  \ \_\\ \_\   \ \_\ \_\   \ \_____\   \ \_\       \ \_____\   \ \_\ \_\   \ `\____\     \ \_\     \ \_____\   \ `\___/     /\_\\ \_\     \ \_\        /\_______\
    \/_/\/_/     \/___/       \/___/       \/___/       \/_____/     \/_/       \/___/      \/_/\/_/     \/_____/    \/___/      \/_/\/_/    \/___/     \/_/ \/_/   \/_/ \/_/    \/_/\/_/    \/_____/    \/_/        \/_____/    \/_/\/ /    \/_____/      \/_/      \/_____/    `\/__/      \/_/ \/_/      \/_/        \/_______/
                                                                                                                                                                  ?

Numbers
   _          ___          __        __ __         ______        ____       ________      __          __           __        __
 /' \       /'___`\      /'__`\     /\ \\ \       /\  ___\      /'___\     /\_____  \   /'_ `\      /'_ `\       /'__`\     /\_\
/\_, \     /\_\ /\ \    /\_\L\ \    \ \ \\ \      \ \ \__/     /\ \__/     \/___//'/'  /\ \L\ \    /\ \L\ \     /\ \/\ \    \/_/      _______
\/_/\ \    \/_/// /__   \/_/_\_<_    \ \ \\ \_     \ \___``\   \ \  _``\       /' /'   \/_> _ <_   \ \___, \    \ \ \ \ \            /\______\
   \ \ \      // /_\ \    /\ \L\ \    \ \__ ,__\    \/\ \L\ \   \ \ \L\ \     /' /'      /\ \L\ \   \/__,/\ \    \ \ \_\ \      __   \/______/
    \ \_\    /\______/    \ \____/     \/_/\_\_/     \ \____/    \ \____/    /\_/        \ \____/        \ \_\    \ \____/     /\_\
     \/_/    \/_____/      \/___/         \/_/        \/___/      \/___/     \//          \/___/          \/_/     \/___/      \/_/



*/

package main

import (
	"fmt"
	"time"
)

//newline in ascii is 0x0a

func main() {
	dt := time.Now()
	fakeTime := []rune(`010`)
	//newLine := 0x0a
	fmt.Print("Real Time: " + dt.Format("15:04\n"))
	fmt.Println("Fake Time: " + string(fakeTime))
	fmt.Println(string(numbers()['1'][1]))
	fmt.Print(asciiPrint(fakeTime))
}

// len(numbers[0]
// need a way to save state after the new line is reached and then continue from ther
func asciiPrint(input []rune) string {
	var output string
	var z int
	//var tmp int
	for i := 0; i < len(input); i++ {
		z = 0
		for {
			if numbers()[input[i]][z] == 0x0a {
				//tmp = z
				break
			}
			output = output + string(numbers()[input[i]][z])
			z++
		}

	}

	return output
}

func numbers() map[rune]string {
	var nums = map[rune]string{
		// 		'0': `
		//   __
		//  / __` + "`" + `\
		// /\ \/\ \
		// \ \ \ \ \
		//  \ \ \_\ \
		//   \ \____/
		//    \/___/ `,
		// 		'1': `
		//   __
		//  /' \
		// /\_, \
		// \/_/\ \
		//    \ \ \
		//     \ \_\
		//      \/_/`,

		'0': `00
99
00
`,

		'1': `11
22
11
`,
	}
	return nums
}
